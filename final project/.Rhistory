str(df)
# Credit_Score (o)
# Credit_Mix (o),Credit_History_Age, Monthly_Balance (o)
# Num_of_Delayed_Payment (o), Total_EMI_per_month (o), Age(o), Outstanding_Debt
# Num_Bank_Accounts, Num_Credit_Card, Num_of_Loan (o), Num_Credit_Inquiries
# Occupation, Montly_Inhand_Salary, Annual_Income (o), Amount_invested_monthly
## "Occupation"
#df$Occupation <- replace(df$Occupation, df$Occupation=="_______", NA)
#df$Occupation <- as.factor(df$Occupation)
#df$Occupation = as.numeric(df$Occupation)
## "Amount_invested_monthly"
df$Amount_invested_monthly = as.numeric(df$Amount_invested_monthly)
#df["Total_EMI_per_month"] <- round(df["Total_EMI_per_month"], digits = 2)
## "Outstanding_Debt"
df$Outstanding_Debt = str_replace(df$Outstanding_Debt,"_","")
df$Outstanding_Debt = as.numeric(df$Outstanding_Debt)
## "Credit_History_Age"
library(stringr)
df$Credit_History_Age = str_replace(df$Credit_History_Age,"Years and","")
df$Credit_History_Age = str_replace(df$Credit_History_Age,"Months","")
df$Credit_History_Age = str_replace(df$Credit_History_Age," ",".")
df$Credit_History_Age = str_replace(df$Credit_History_Age," ","")
df$Credit_History_Age = as.numeric(df$Credit_History_Age)
## "Age"
df$Age <- gsub("[[:punct:]]", "", df$Age)
df$Age <- as.integer(df$Age)
# Filtered out a group age under 18 and greater than 100
df <- df[(df$Age > 17) & (df$Age < 100),]
## "Annual_Income"
#Removed Special Characters & Changed the data type into "num" & Rounded
df$Annual_Income <- as.numeric(sub("_", "", df$Annual_Income))
## "Num_of_Delayed_Payment"
# Removed Special Characters & Changed the data type from "char" to "int"
df$Num_of_Delayed_Payment <- gsub("[[:punct:]]", "", df$Num_of_Delayed_Payment)
df$Num_of_Delayed_Payment <- as.integer(df$Num_of_Delayed_Payment)
## "Num_of_Loan"
# Removed Special Characters & Changed the data type from "char" to "int"
df$Num_of_Loan <- gsub("[[:punct:]]", "", df$Num_of_Loan)
df$Num_of_Loan <- as.integer(df$Num_of_Loan)
# Removed value below 0
df <- df[df['Num_of_Loan'] >= 0, ]
## "Credit_Mix"
# Removed Special Characters
# Converted "char" into "int" from "Good" to 3, "Standard" to 2, and "Bad" to 1
df <- df[df['Credit_Mix'] != "_",]
df$Credit_Mix[df$Credit_Mix == 'Bad'] <- 1
df$Credit_Mix[df$Credit_Mix == 'Standard'] <- 2
df$Credit_Mix[df$Credit_Mix == 'Good'] <- 3
df$Credit_Mix <- as.integer(df$Credit_Mix)
## "Total_EMI_per_month"
df["Total_EMI_per_month"] <- round(df["Total_EMI_per_month"], digits = 2)
## "Credit_score"
# Removed Special Characters
df <- df[df['Credit_Score'] != "_",]
df$Credit_Score[(df$Credit_Score == 'Poor')] <- 1
df$Credit_Score[(df$Credit_Score == 'Standard')] <- 2
df$Credit_Score[(df$Credit_Score == 'Good')] <- 3
df$Credit_Score <- as.integer(df$Credit_Score)
## "Monthly_Balance"
# Converted into "int" and rounded
df$Monthly_Balance <- as.integer(df$Monthly_Balance)
df["Monthly_Balance"] <- round(df["Monthly_Balance"], digits = 2)
## "Month"
df$Month[(df$Month == 'January')] <- 1
df$Month[(df$Month == 'February')] <- 2
df$Month[(df$Month == 'March')] <- 3
df$Month[(df$Month == 'April')] <- 4
df$Month[(df$Month == 'May')] <- 5
df$Month[(df$Month == 'June')] <- 6
df$Month[(df$Month == 'July')] <- 7
df$Month[(df$Month == 'August')] <- 8
df$Month <- as.integer(df$Month)
df = na.omit(df)
library(ezids)
df = outlierKD2(df, Credit_History_Age, rm=T)
df = outlierKD2(df, Monthly_Balance, rm=T)
df = outlierKD2(df, Num_of_Delayed_Payment, rm=T)
df = outlierKD2(df, Total_EMI_per_month, rm=T)
df = outlierKD2(df, Age, rm=T)
df = outlierKD2(df, Outstanding_Debt, rm=T)
df = outlierKD2(df, Num_Bank_Accounts, rm=T)
df = outlierKD2(df, Num_Credit_Card, rm=T)
df = outlierKD2(df, Num_of_Loan, rm=T)
df = outlierKD2(df, Num_Credit_Inquiries, rm=T)
df = outlierKD2(df, Monthly_Inhand_Salary, rm=T)
df = outlierKD2(df, Amount_invested_monthly, rm=T)
df = outlierKD2(df, Annual_Income, rm=T)
str(df)
df = na.omit(df)
mix = table(df$Credit_Mix, df$Credit_Score)
rownames(mix) <- c("Bad","Standard","Good")
xkabledply(mix, title="Contingency table for Credit_Mix vs Credit_Score")
chitest = chisq.test(mix)
print(chitest)
# expected values
# xkabledply(chitest, title = "chisquare test")
#ANOVA
```{r}
fit <- lm(Credit_Score ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = dfscale)
loadPkg("corrplot")
dfscale = data.frame(scale(df))
str(dfscale)
dfcor = cor(dfscale,use='complete.obs')
dfcor
corrplot.mixed(dfcor)
corrplot(dfcor, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
fit <- lm(Credit_Score ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = dfscale)
summary(fit)
library(stringr)
final = data.frame(read.csv("dataset/train.csv"))
df = final
#df = subset(final, Month=="January")
library(dplyr)
names(df)
df <- df[,c("Credit_Score","Credit_Mix","Credit_History_Age","Monthly_Balance","Num_of_Delayed_Payment","Total_EMI_per_month","Age","Outstanding_Debt","Num_Bank_Accounts","Num_Credit_Card","Num_of_Loan","Num_Credit_Inquiries","Monthly_Inhand_Salary","Amount_invested_monthly","Annual_Income","Month")]
summary(df)
str(df)
# Credit_Score (o)
# Credit_Mix (o),Credit_History_Age, Monthly_Balance (o)
# Num_of_Delayed_Payment (o), Total_EMI_per_month (o), Age(o), Outstanding_Debt
# Num_Bank_Accounts, Num_Credit_Card, Num_of_Loan (o), Num_Credit_Inquiries
# Occupation, Montly_Inhand_Salary, Annual_Income (o), Amount_invested_monthly
## "Occupation"
#df$Occupation <- replace(df$Occupation, df$Occupation=="_______", NA)
#df$Occupation <- as.factor(df$Occupation)
#df$Occupation = as.numeric(df$Occupation)
## "Amount_invested_monthly"
df$Amount_invested_monthly = as.numeric(df$Amount_invested_monthly)
#df["Total_EMI_per_month"] <- round(df["Total_EMI_per_month"], digits = 2)
## "Outstanding_Debt"
df$Outstanding_Debt = str_replace(df$Outstanding_Debt,"_","")
df$Outstanding_Debt = as.numeric(df$Outstanding_Debt)
## "Credit_History_Age"
library(stringr)
df$Credit_History_Age = str_replace(df$Credit_History_Age,"Years and","")
df$Credit_History_Age = str_replace(df$Credit_History_Age,"Months","")
df$Credit_History_Age = str_replace(df$Credit_History_Age," ",".")
df$Credit_History_Age = str_replace(df$Credit_History_Age," ","")
df$Credit_History_Age = as.numeric(df$Credit_History_Age)
## "Age"
df$Age <- gsub("[[:punct:]]", "", df$Age)
df$Age <- as.integer(df$Age)
# Filtered out a group age under 18 and greater than 100
df <- df[(df$Age > 17) & (df$Age < 100),]
## "Annual_Income"
#Removed Special Characters & Changed the data type into "num" & Rounded
df$Annual_Income <- as.numeric(sub("_", "", df$Annual_Income))
## "Num_of_Delayed_Payment"
# Removed Special Characters & Changed the data type from "char" to "int"
df$Num_of_Delayed_Payment <- gsub("[[:punct:]]", "", df$Num_of_Delayed_Payment)
df$Num_of_Delayed_Payment <- as.integer(df$Num_of_Delayed_Payment)
## "Num_of_Loan"
# Removed Special Characters & Changed the data type from "char" to "int"
df$Num_of_Loan <- gsub("[[:punct:]]", "", df$Num_of_Loan)
df$Num_of_Loan <- as.integer(df$Num_of_Loan)
# Removed value below 0
df <- df[df['Num_of_Loan'] >= 0, ]
## "Credit_Mix"
# Removed Special Characters
# Converted "char" into "int" from "Good" to 3, "Standard" to 2, and "Bad" to 1
df <- df[df['Credit_Mix'] != "_",]
df$Credit_Mix[df$Credit_Mix == 'Bad'] <- 1
df$Credit_Mix[df$Credit_Mix == 'Standard'] <- 2
df$Credit_Mix[df$Credit_Mix == 'Good'] <- 3
df$Credit_Mix <- as.integer(df$Credit_Mix)
## "Total_EMI_per_month"
df["Total_EMI_per_month"] <- round(df["Total_EMI_per_month"], digits = 2)
## "Credit_score"
# Removed Special Characters
df <- df[df['Credit_Score'] != "_",]
df$Credit_Score[(df$Credit_Score == 'Poor')] <- 1
df$Credit_Score[(df$Credit_Score == 'Standard')] <- 2
df$Credit_Score[(df$Credit_Score == 'Good')] <- 3
df$Credit_Score <- as.integer(df$Credit_Score)
## "Monthly_Balance"
# Converted into "int" and rounded
df$Monthly_Balance <- as.integer(df$Monthly_Balance)
df["Monthly_Balance"] <- round(df["Monthly_Balance"], digits = 2)
## "Month"
df$Month[(df$Month == 'January')] <- 1
df$Month[(df$Month == 'February')] <- 2
df$Month[(df$Month == 'March')] <- 3
df$Month[(df$Month == 'April')] <- 4
df$Month[(df$Month == 'May')] <- 5
df$Month[(df$Month == 'June')] <- 6
df$Month[(df$Month == 'July')] <- 7
df$Month[(df$Month == 'August')] <- 8
df$Month <- as.integer(df$Month)
df = na.omit(df)
library(ezids)
df = outlierKD2(df, Credit_History_Age, rm=T)
df = outlierKD2(df, Monthly_Balance, rm=T)
df = outlierKD2(df, Num_of_Delayed_Payment, rm=T)
df = outlierKD2(df, Total_EMI_per_month, rm=T)
df = outlierKD2(df, Age, rm=T)
df = outlierKD2(df, Outstanding_Debt, rm=T)
df = outlierKD2(df, Num_Bank_Accounts, rm=T)
df = outlierKD2(df, Num_Credit_Card, rm=T)
df = outlierKD2(df, Num_of_Loan, rm=T)
df = outlierKD2(df, Num_Credit_Inquiries, rm=T)
df = outlierKD2(df, Monthly_Inhand_Salary, rm=T)
df = outlierKD2(df, Amount_invested_monthly, rm=T)
df = outlierKD2(df, Annual_Income, rm=T)
str(df)
df = na.omit(df)
mix = table(df$Credit_Mix, df$Credit_Score)
rownames(mix) <- c("Bad","Standard","Good")
xkabledply(mix, title="Contingency table for Credit_Mix vs Credit_Score")
chitest = chisq.test(mix)
print(chitest)
# expected values
# xkabledply(chitest, title = "chisquare test")
# Credit Score & Monthly_Balance
anova1 = aov(Monthly_Balance ~ Credit_Score, data=df)
anova1
names(anova1)
xkabledply(anova1, title = "ANOVA result summary the Monthly Balance between Credit Score")
# Credit Score & Credit_History_Age
anova2 = aov(Credit_History_Age ~ Credit_Score, data=df)
anova2
names(anova2)
xkabledply(anova2, title = "ANOVA result summary the Credit History Age between Credit Score")
# Credit Score & Num_Credit_Card
anova3 = aov(Num_Credit_Card ~ Credit_Score, data=df)
anova3
names(anova3)
xkabledply(anova3, title = "ANOVA result summary the Numer of Credit Cards between Credit Score")
# Credit Score & Num_Credit_Inquiries
anova4 = aov(Num_Credit_Inquiries ~ Credit_Score, data=df)
anova4
names(anova4)
xkabledply(anova4, title = "ANOVA result summary the Numer of Credit Inquiries between Credit Score")
# Credit Score & Outstanding_Debt
anova5 = aov(Outstanding_Debt ~ Credit_Score, data=df)
anova5
names(anova5)
xkabledply(anova5, title = "ANOVA result summary the Outstanding Debt between Credit Score")
loadPkg("corrplot")
dfscale = data.frame(scale(df))
str(dfscale)
dfcor = cor(dfscale,use='complete.obs')
dfcor
corrplot.mixed(dfcor)
corrplot(dfcor, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
fit <- lm(Credit_Score ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = dfscale)
summary(fit)
### Featrue Selection
loadPkg("leaps")
reg1 <- regsubsets(Credit_Score~. , data = dfscale, nvmax = 10, nbest = 2, method ="exhaustive")
summary(reg1)
res.sum <- summary(reg1)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic))
plot(reg1, scale = "adjr2", main = "Adjusted R^2")
plot(reg1, scale = "r2", main = "R^2")
plot(reg1, scale = "bic", main = "BIC")
plot(reg1, scale = "Cp", main = "Cp")
### Forward Selection
reg.forward10 <- regsubsets(Credit_Score~., data = dfscale, nvmax = 10, nbest = 1, method = "forward")
plot(reg.forward10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.forward10, scale = "bic", main = "BIC")
plot(reg.forward10, scale = "Cp", main = "Cp")
# summary(reg.forward10)
### non-linear model
regnonlin.forward10 <-regsubsets(Credit_Score~., data = dfscale, nvmax = 10, method="forward")
plot(regnonlin.forward10, scale = "adjr2", main = "Adjusted R^2")
plot(regnonlin.forward10, scale = "bic", main = "BIC")
plot(regnonlin.forward10, scale = "Cp", main = "Cp")
summary(regnonlin.forward10)
### Backward Selection
reg.back10 <- regsubsets(Credit_Score~., data = dfscale, method = "backward", nvmax = 10, nbest = 2)
plot(reg.back10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.back10, scale = "bic", main = "BIC")
plot(reg.back10, scale = "Cp", main = "Cp")
summary(reg.back10)
### Sequential Replacement seqrep
reg.seqrep <- regsubsets(Credit_Score~., data = dfscale, nvmax = 10, nbest = 2 , method = "seqrep")
plot(reg.seqrep, scale = "adjr2", main = "Adjusted R^2")
plot(reg.seqrep, scale = "bic", main = "BIC")
plot(reg.seqrep, scale = "Cp", main = "Cp")
# Alternative plots
loadPkg("car")
summaryRegForward = summary(reg1)
# Adjusted R2
car::subsets(reg1, statistic="adjr2", legend = FALSE, min.size = 2, main = "Adjusted R^2")
# Mallow Cp
subsets(reg1, statistic="cp", legend = FALSE, min.size = 4, main = "Mallow Cp")
abline(a = 1, b = 1, lty = 3)
# Linear Regression Based on Feature Selection Result on Adj R^2
fit1 <- lm(Credit_Score ~ Credit_Mix+Outstanding_Debt+Num_Credit_Card+Num_Credit_Inquiries, data = dfscale)
summary(fit1)
# Linear Regression Based on Feature Selection Result on BIC
fit2 <- lm(Credit_Score ~ Credit_Mix+Num_Credit_Card+Num_Credit_Inquiries, data = dfscale)
summary(fit2)
# Linear Regression Based on Feature Selection Result on Cp: Let's use this logit model.
fit3 <- lm(Credit_Score ~ Credit_Mix+Credit_History_Age+Num_of_Delayed_Payment+Total_EMI_per_month+Age+Outstanding_Debt+Num_Credit_Card+Num_Credit_Inquiries+Amount_invested_monthly+Month, data = dfscale)
summary(fit3)
fit4 <- lm(Credit_Score ~ Credit_Mix+Num_Credit_Card+Num_Credit_Inquiries, data = dfscale)
summary(fit4)
df <- transform(df, Credit_Score1 = ifelse((Credit_Score==1) | (Credit_Score==2), 0, 1))
df <- transform(df, Credit_Score2 = ifelse((Credit_Score==2) | (Credit_Score==3), 1, 0))
df$Credit_Score1 <- factor(df$Credit_Score1 , levels=c(0, 1))
df$Credit_Score2 <- factor(df$Credit_Score2 , levels=c(0, 1))
## Model1: poor-standard 0, good 1
Logit1 <- glm(Credit_Score1 ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = df, family = "binomial")
summary(Logit1)
## Model2: poor 0, standard-good 1 : We decided to use this model.
Logit2 <- glm(Credit_Score2 ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = df, family = "binomial")
summary(Logit2)
## Model3: poor 0, good 1
subset_logit <- subset(df, Credit_Score!=2)
subset_logit <- transform(df, Credit_Score3 = ifelse((Credit_Score==3), 1, 0))
Logit3 <- glm(Credit_Score3 ~ Monthly_Balance+Credit_History_Age+Credit_Mix, data = subset_logit, family = "binomial")
summary(Logit3)
loadPkg("regclass")
xkabledply(confusion_matrix(Logit1), title = "Confusion matrix from Logit Model1")
xkabledply(confusion_matrix(Logit2), title = "Confusion matrix from Logit Model2")
xkabledply(confusion_matrix(Logit3), title = "Confusion matrix from Logit Model3")
unloadPkg("regclass")
#loadPkg("ResourceSelection")
#admitLogitHoslem = hoslem.test(df$Credit_Score1, fitted(Logit1))
#admitLogitHoslem = hoslem.test(df$Credit_Score2, fitted(Logit2))
#admitLogitHoslem = hoslem.test(subset_logit$Credit_Score3, fitted(Logit3))
#unloadPkg("ResourceSelection")
loadPkg("pROC")
## Model1: poor-standard 0, good 1 : The model is overfitted.
#df$prob <- NA
prob=predict(Logit1, type = "response")
df$prob=prob
h <- roc(Credit_Score1~prob, data=df)
auc(h) # 0.918 area-under-curve prefer 0.8 or higher.
plot(h)
## Model2: poor 0, standard-good 1 : We decied to use this model.
prob=predict(Logit2, type = "response")
df$prob=prob
h <- roc(Credit_Score2~prob, data=df)
auc(h) # 0.77 area-under-curve prefer 0.8 or higher.
plot(h)
## Model3: poor 0, good 1 : The number of observation is below 3000.
prob=predict(Logit3, type = "response")
subset_logit$prob=prob
h3 <- roc(Credit_Score3~prob, data=subset_logit)
auc(h3) # 0.92 area-under-curve prefer 0.8 or higher.
plot(h3)
unloadPkg("pROC")
## Model2: poor 0, standard-good 1
Logit2 <- glm(Credit_Score2 ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = df, family = "binomial")
summary(Logit2)
## Linear Regression
fit <- lm(Credit_Score ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = dfscale)
summary(fit)
loadPkg("leaps")
## Model1: poor-standard 0, good 1
subset1 = subset(df, select = -c(Credit_Score, Credit_Score2, prob))
reg.leaps <- regsubsets(Credit_Score1~., data = subset1, nbest = 1, method = "exhaustive")
plot(reg.leaps, scale = "adjr2", main = "Adjusted R^2")
plot(reg.leaps, scale = "bic", main = "BIC")
plot(reg.leaps, scale = "Cp", main = "Cp")
## Model2: poor 0, standard-good 1
subset2 = subset(df, select = -c(Credit_Score, Credit_Score1, prob))
reg.leaps <- regsubsets(Credit_Score2~., data = subset2, nbest = 1, method = "exhaustive")
plot(reg.leaps, scale = "adjr2", main = "Adjusted R^2")
plot(reg.leaps, scale = "bic", main = "BIC")
plot(reg.leaps, scale = "Cp", main = "Cp")
## Model3: poor 0, good 1
subset3 = subset(subset_logit, select = -c(Credit_Score, Credit_Score1, Credit_Score2, prob))
reg.leaps <- regsubsets(Credit_Score3~., data = subset3, nbest = 1, method = "exhaustive")
plot(reg.leaps, scale = "adjr2", main = "Adjusted R^2")
plot(reg.leaps, scale = "bic", main = "BIC")
plot(reg.leaps, scale = "Cp", main = "Cp")
#unloadPkg("leaps")
## Model2: poor 0, standard-good 1
# Logit Regression Based on Feature Selection Result on Adj R^2
BLogit1 <- glm(Credit_Score2 ~ Credit_Mix+Outstanding_Debt+Num_Credit_Card+Num_of_Loan+Num_Credit_Inquiries, data = subset2, family = "binomial")
summary(BLogit1)
# Logit Regression Based on Feature Selection Result on BIC
BLogit2 <- glm(Credit_Score2 ~ Outstanding_Debt+Num_Credit_Card+Num_Credit_Inquiries, data = subset2, family = "binomial")
summary(BLogit2)
# Logit Regression Based on Feature Selection Result on Cp: Let's use this logit model.
BLogit3 <- glm(Credit_Score2 ~ Credit_Mix+Credit_History_Age+Outstanding_Debt+Num_Bank_Accounts+ +Num_Credit_Card+Num_of_Loan+Num_Credit_Inquiries+Month, data = subset2, family = "binomial")
summary(BLogit3)
# Logit Regression Based on Feature Selection Result on BIC: Let's use this logit model.
BLogit4 <- glm(Credit_Score2 ~ Outstanding_Debt+Num_Credit_Card+Num_Credit_Inquiries, data = subset2, family = "binomial")
summary(BLogit4)
loadPkg("regclass")
xkabledply(confusion_matrix(BLogit4), title = "Confusion matrix from Logit Model4")
# Sudanshu # Upmanyu
newdata <- with(subset2, data.frame(Outstanding_Debt=c(800, 500), Num_Credit_Card=c(6, 8), Num_Credit_Inquiries=c(2,10)))
predict(BLogit4, newdata, type="response")
#dataset: subset2
#y: Credit_Score2
#x: Monthly_Balance +Credit_History_Age+Credit_Mix
df_scale_logit <- data.frame(scale(df[,c("Credit_Mix","Credit_History_Age","Monthly_Balance","Num_of_Delayed_Payment","Total_EMI_per_month","Age","Outstanding_Debt","Num_Bank_Accounts","Num_Credit_Card","Num_of_Loan","Num_Credit_Inquiries","Monthly_Inhand_Salary","Amount_invested_monthly","Annual_Income","Month")]))
# df_scale_logit['Credit_Score'] = df['Credit_Score']
str(df_scale_logit)
# df_scale_logit$Credit_Score <- factor(df_scale_logit$Credit_Score)
# df_scale_logit$Credit_Score2 <- factor(df_scale_logit$Credit_Score2)
library(ISLR)
library(class)
library("zoo")
df_scale_logit1 <- df_scale_logit  # Duplicate data frame
for(i in 1:ncol(df_scale_logit)) { # Replace NA in all columns
df_scale_logit[ , i][is.na(df_scale_logit1[ , i])] <- mean(df_scale_logit1[ , i], na.rm = TRUE)
}
sample <- sample(2, nrow(df_scale_logit), replace=TRUE, prob=c(0.7,0.3))
train  <- df_scale_logit[sample==1, ]
test   <- df_scale_logit[sample==2, ]
# install.packages("zoo")                                    # Install & load zoo package
df_scale_logit['Credit_Score'] = df['Credit_Score']
df_scale_logit$Credit_Score <- factor(df_scale_logit$Credit_Score)
df_scale_logit.trainlabel <- df_scale_logit[sample==1, 16]
df_scale_logit.testlabel <- df_scale_logit[sample==2, 16]
# df_scale_logit.trainlabel
knn_m1 <- knn(train = train, test = test, cl=df_scale_logit.trainlabel, k=7)
loadPkg("gmodels")
IRISPREDCross <- CrossTable(df_scale_logit.testlabel, knn_m1, prop.chisq = FALSE)
library(caret)
# Credit Score & Monthly_Balance
anova1 = aov(Monthly_Balance ~ Credit_Score, data=df)
anova1
names(anova1)
xkabledply(anova1, title = "ANOVA result summary the Monthly Balance between Credit Score")
# Credit Score & Credit_History_Age
anova2 = aov(Credit_History_Age ~ Credit_Score, data=df)
anova2
names(anova2)
xkabledply(anova2, title = "ANOVA result summary the Credit History Age between Credit Score")
# Credit Score & Num_Credit_Card
anova3 = aov(Num_Credit_Card ~ Credit_Score, data=df)
anova3
names(anova3)
xkabledply(anova3, title = "ANOVA result summary the Numer of Credit Cards between Credit Score")
# Credit Score & Num_Credit_Inquiries
anova4 = aov(Num_Credit_Inquiries ~ Credit_Score, data=df)
anova4
names(anova4)
xkabledply(anova4, title = "ANOVA result summary the Numer of Credit Inquiries between Credit Score")
# Credit Score & Outstanding_Debt
anova5 = aov(Outstanding_Debt ~ Credit_Score, data=df)
anova5
names(anova5)
xkabledply(anova5, title = "ANOVA result summary the Outstanding Debt between Credit Score")
loadPkg("corrplot")
dfscale = data.frame(scale(df))
fit <- lm(Credit_Score ~ Monthly_Balance +Credit_History_Age+Credit_Mix, data = dfscale)
summary(fit)
df$Credit_Score <- as.factor(df$Credit_Score)
library(ggplot2)
ggplot(df, aes(x=Credit_Mix, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7, bins = 3)+
labs(title="Histogram of Credit_Mix")
ggplot(df, aes(x=Credit_History_Age, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Credit_History_Age")
ggplot(df, aes(x=Monthly_Balance, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Monthly_Balance")
ggplot(df, aes(x=Num_of_Delayed_Payment, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Num_of_Delayed_Payment")
ggplot(df, aes(x=Total_EMI_per_month, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Total_EMI_per_month")
ggplot(df, aes(x=Age, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Age")
ggplot(df, aes(x=Outstanding_Debt, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Outstanding_Debt")
ggplot(df, aes(x=Num_Bank_Accounts, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7, bins = 12)+
labs(title="Histogram of Num_Bank_Accounts")
ggplot(df, aes(x=Num_Credit_Card, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7, bins = 12)+
labs(title="Histogram of Num_Credit_Card")
ggplot(df, aes(x=Num_of_Loan, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7, bins = 12)+
labs(title="Histogram of Num_of_Loan")
ggplot(df, aes(x=Num_Credit_Inquiries, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7, bins = 15)+
labs(title="Histogram of Num_Credit_Inquiries")
ggplot(df, aes(x=Monthly_Inhand_Salary, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Monthly_Inhand_Salary")
ggplot(df, aes(x=Annual_Income, fill = Credit_Score, colour = Credit_Score)) +
geom_histogram(alpha = 0.7)+
labs(title="Histogram of Annual_Income")
df$Credit_Score <- as.integer(df$Credit_Score)
mix = table(df$Credit_Mix, df$Credit_Score)
rownames(mix) <- c("Bad","Standard","Good")
xkabledply(mix, title="Contingency table for Credit_Mix vs Credit_Score")
chitest = chisq.test(mix)
print(chitest)
library(ggplot2)
df$Credit_Score <- factor(df$Credit_Score , levels=c('1', '2', '3'))
# Credit Score & Monthly_Balance
ggplot(df, aes(x=Credit_Score, y=Monthly_Balance)) + geom_boxplot( color=c("red","green","blue")) +
labs(title="Boxplot of the Monthly Balance with different Credit Scores", x="Credit Score", y = "Monthly Balance")
# Credit Score & Credit_History_Age
ggplot(df, aes(x=Credit_Score, y=Credit_History_Age)) + geom_boxplot( colour=c("red","green","blue")) +
labs(title="Boxplot of the Credit History Age with different Credit Scores", x="Credit Score", y = "Credit History Age")
# Credit Score & Num_Credit_Card
ggplot(df, aes(x=Credit_Score, y=Num_Credit_Card)) + geom_boxplot( colour=c("red","green","blue")) +
labs(title="Boxplot of the Number of Credit Cards with different Credit Scores", x="Credit Score", y = "Number of Credit Cards")
# Credit Score & Num_Credit_Inquiries
ggplot(df, aes(x=Credit_Score, y=Num_Credit_Inquiries)) + geom_boxplot( colour=c("red","green","blue")) +
labs(title="Boxplot of the Number of Credit Inquiries with different Credit Scores", x="Credit Score", y = "Number of Credit Inquiries")
# Credit Score & Outstanding_Debt
ggplot(df, aes(x=Credit_Score, y=Outstanding_Debt)) + geom_boxplot( colour=c("red","green","blue")) +
labs(title="Boxplot of the Outstanding Debt with different Credit Scores", x="Credit Score", y = "Outstanding Debt")
